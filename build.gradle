apply plugin: 'java'
apply plugin: 'maven'

group = 'com.trunk.commons'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configure(subprojects) {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.jfrog.org/libs-snapshot' }
    }

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group 'com.trunk.commons'
    version = project.hasProperty('app_version') ? app_version : 'local'

    sourceCompatibility = 1.8

    dependencies {
        compile 'com.netflix.governator:governator-core:1.12.8'

        testCompile 'org.testng:testng:6.8'
        testCompile 'org.mockito:mockito-core:2.0.40-beta'

        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    test {
        beforeTest { descriptor ->
            logger.lifecycle("Running: " + descriptor)
        }
    }

    test {
        useTestNG()
        systemProperty("io.netty.leakDetectionLevel", "paranoid")
        systemProperty("io.LEVEL", "DEBUG")
        systemProperty("rx.LEVEL", "DEBUG")
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }
                    }.each() {
                        it.scope*.value = 'compile'
                    }
                }
                from components.java
                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }
}
